// Code generated by go-swagger; DO NOT EDIT.

/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// GetCompartmentsResponse get compartments response
// swagger:model GetCompartmentsResponse
type GetCompartmentsResponse struct {

	// compartments
	Compartments []*Compartmentstruct `json:"compartments"`
}

// Validate validates this get compartments response
func (m *GetCompartmentsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompartments(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCompartmentsResponse) validateCompartments(formats strfmt.Registry) error {

	if swag.IsZero(m.Compartments) { // not required
		return nil
	}

	for i := 0; i < len(m.Compartments); i++ {

		if swag.IsZero(m.Compartments[i]) { // not required
			continue
		}

		if m.Compartments[i] != nil {

			if err := m.Compartments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("compartments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCompartmentsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCompartmentsResponse) UnmarshalBinary(b []byte) error {
	var res GetCompartmentsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
