// Code generated by go-swagger; DO NOT EDIT.

/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkItem work item
// swagger:model workItem
type WorkItem struct {

	// activity
	Activity Actarray `json:"activity"`

	// closed at
	ClosedAt string `json:"closedAt,omitempty"`

	// cluster Id
	ClusterID string `json:"clusterId,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// locked until
	LockedUntil string `json:"lockedUntil,omitempty"`

	// resource owner Id
	ResourceOwnerID string `json:"resourceOwnerId,omitempty"`

	// response error
	ResponseError string `json:"responseError,omitempty"`

	// started at
	StartedAt string `json:"startedAt,omitempty"`

	// status
	// Maximum: 3
	// Minimum: 0
	Status *int32 `json:"status,omitempty"`

	// status string
	StatusString string `json:"statusString,omitempty"`

	// tenant Id
	TenantID string `json:"tenantId,omitempty"`

	// tm Id
	TmID string `json:"tmId,omitempty"`

	// type
	// Maximum: 2
	// Minimum: 0
	Type *int32 `json:"type,omitempty"`
}

// Validate validates this work item
func (m *WorkItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatusString(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkItem) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := validate.MinimumInt("status", "body", int64(*m.Status), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("status", "body", int64(*m.Status), 3, false); err != nil {
		return err
	}

	return nil
}

var workItemTypeStatusStringPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["New","Running","Complete","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workItemTypeStatusStringPropEnum = append(workItemTypeStatusStringPropEnum, v)
	}
}

const (
	// WorkItemStatusStringNew captures enum value "New"
	WorkItemStatusStringNew string = "New"
	// WorkItemStatusStringRunning captures enum value "Running"
	WorkItemStatusStringRunning string = "Running"
	// WorkItemStatusStringComplete captures enum value "Complete"
	WorkItemStatusStringComplete string = "Complete"
	// WorkItemStatusStringFailed captures enum value "Failed"
	WorkItemStatusStringFailed string = "Failed"
)

// prop value enum
func (m *WorkItem) validateStatusStringEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, workItemTypeStatusStringPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WorkItem) validateStatusString(formats strfmt.Registry) error {

	if swag.IsZero(m.StatusString) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusStringEnum("statusString", "body", m.StatusString); err != nil {
		return err
	}

	return nil
}

func (m *WorkItem) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.MinimumInt("type", "body", int64(*m.Type), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("type", "body", int64(*m.Type), 2, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkItem) UnmarshalBinary(b []byte) error {
	var res WorkItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
