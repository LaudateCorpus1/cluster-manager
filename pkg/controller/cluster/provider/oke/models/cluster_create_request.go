// Code generated by go-swagger; DO NOT EDIT.

/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterCreateRequest cluster create request
// swagger:model ClusterCreateRequest
type ClusterCreateRequest struct {

	// bmc cluster config
	BmcClusterConfig *BMCClusterConfig `json:"bmcClusterConfig,omitempty"`

	// cloud auth Id
	CloudAuthID string `json:"cloudAuthId,omitempty"`

	// cloud type
	CloudType string `json:"cloudType,omitempty"`

	// k8 version
	K8Version string `json:"k8Version,omitempty"`

	// lb type
	LbType string `json:"lbType,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// tenant Id
	TenantID string `json:"tenantId,omitempty"`

	// wercker Id
	WerckerID string `json:"werckerId,omitempty"`

	//linux version
	LinuxVersion string `json:"linuxVersion, omitempty"`

}

// Validate validates this cluster create request
func (m *ClusterCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBmcClusterConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLbType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterCreateRequest) validateBmcClusterConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.BmcClusterConfig) { // not required
		return nil
	}

	if m.BmcClusterConfig != nil {

		if err := m.BmcClusterConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bmcClusterConfig")
			}
			return err
		}
	}

	return nil
}

var clusterCreateRequestTypeLbTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["node-port","external"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterCreateRequestTypeLbTypePropEnum = append(clusterCreateRequestTypeLbTypePropEnum, v)
	}
}

const (
	// ClusterCreateRequestLbTypeNodePort captures enum value "node-port"
	ClusterCreateRequestLbTypeNodePort string = "node-port"
	// ClusterCreateRequestLbTypeExternal captures enum value "external"
	ClusterCreateRequestLbTypeExternal string = "external"
)

// prop value enum
func (m *ClusterCreateRequest) validateLbTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, clusterCreateRequestTypeLbTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ClusterCreateRequest) validateLbType(formats strfmt.Registry) error {

	if swag.IsZero(m.LbType) { // not required
		return nil
	}

	// value enum
	if err := m.validateLbTypeEnum("lbType", "body", m.LbType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterCreateRequest) UnmarshalBinary(b []byte) error {
	var res ClusterCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
