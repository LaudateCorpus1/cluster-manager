// Code generated by go-swagger; DO NOT EDIT.

/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkerDetails worker details
// swagger:model WorkerDetails
type WorkerDetails struct {

	// availability domain
	AvailabilityDomain string `json:"availabilityDomain,omitempty"`

	// bmc lifecycle state
	BmcLifecycleState string `json:"bmcLifecycleState,omitempty"`

	// compartment Id
	CompartmentID string `json:"compartmentId,omitempty"`

	// error
	Error *WorkerErrors `json:"error,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// image Id
	ImageID string `json:"imageId,omitempty"`

	// k8 version
	K8Version string `json:"k8Version,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// pool
	Pool string `json:"pool,omitempty"`

	// public Ip
	PublicIP string `json:"publicIp,omitempty"`

	// region
	Region string `json:"region,omitempty"`

	// shape
	Shape string `json:"shape,omitempty"`

	// slot
	Slot int32 `json:"slot,omitempty"`

	// subnet Id
	SubnetID string `json:"subnetId,omitempty"`

	// worker status
	WorkerStatus string `json:"workerStatus,omitempty"`
}

// Validate validates this worker details
func (m *WorkerDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBmcLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var workerDetailsTypeBmcLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROVISIONING","RUNNING","TERMINATING","TERMINATED","DELETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workerDetailsTypeBmcLifecycleStatePropEnum = append(workerDetailsTypeBmcLifecycleStatePropEnum, v)
	}
}

const (
	// WorkerDetailsBmcLifecycleStatePROVISIONING captures enum value "PROVISIONING"
	WorkerDetailsBmcLifecycleStatePROVISIONING string = "PROVISIONING"
	// WorkerDetailsBmcLifecycleStateRUNNING captures enum value "RUNNING"
	WorkerDetailsBmcLifecycleStateRUNNING string = "RUNNING"
	// WorkerDetailsBmcLifecycleStateTERMINATING captures enum value "TERMINATING"
	WorkerDetailsBmcLifecycleStateTERMINATING string = "TERMINATING"
	// WorkerDetailsBmcLifecycleStateTERMINATED captures enum value "TERMINATED"
	WorkerDetailsBmcLifecycleStateTERMINATED string = "TERMINATED"
	// WorkerDetailsBmcLifecycleStateDELETED captures enum value "DELETED"
	WorkerDetailsBmcLifecycleStateDELETED string = "DELETED"
)

// prop value enum
func (m *WorkerDetails) validateBmcLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, workerDetailsTypeBmcLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WorkerDetails) validateBmcLifecycleState(formats strfmt.Registry) error {

	if swag.IsZero(m.BmcLifecycleState) { // not required
		return nil
	}

	// value enum
	if err := m.validateBmcLifecycleStateEnum("bmcLifecycleState", "body", m.BmcLifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *WorkerDetails) validateError(formats strfmt.Registry) error {

	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {

		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkerDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkerDetails) UnmarshalBinary(b []byte) error {
	var res WorkerDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
